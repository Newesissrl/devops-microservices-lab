# GitOps Infrastructure Management Workflow
# Manages Terraform infrastructure with plan/apply automation and drift detection
# Demonstrates Infrastructure as Code (IaC) principles in GitOps

name: Infrastructure Management

# GitOps Triggers: Infrastructure changes and scheduled drift detection
on:
  # Manual trigger for infrastructure operations
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - staging
        - prod
      action:
        description: 'Terraform action'
        required: true
        default: 'plan'
        type: choice
        options:
        - plan
        - apply
        - destroy

  # Automatic trigger on infrastructure code changes
  push:
    paths:
      - 'devops/terraform/**'
    branches: [main, develop]

  # Scheduled drift detection (GitOps principle: continuous reconciliation)
  schedule:
    - cron: '0 6 * * 1'  # Weekly on Monday at 6 AM UTC

# Required permissions for infrastructure management
permissions:
  contents: read
  id-token: write
  pull-requests: write  # For commenting on PRs with plan results

env:
  TF_VERSION: 1.6.0

jobs:
  # Job 1: Terraform Plan
  # GitOps: Always plan before apply to show intended changes
  terraform-plan:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        # Plan for all environments to detect drift
        environment: [dev, staging, prod]
    
    outputs:
      plan-dev: ${{ steps.plan.outputs.plan-dev }}
      plan-staging: ${{ steps.plan.outputs.plan-staging }}
      plan-prod: ${{ steps.plan.outputs.plan-prod }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Configure AWS credentials using OIDC
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GitHubActionsRole-${{ matrix.environment }}
          aws-region: us-west-2
          role-session-name: terraform-${{ matrix.environment }}-${{ github.run_id }}

      # Setup Terraform with version pinning
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          terraform_wrapper: false  # Needed for output parsing

      # Initialize Terraform with remote state
      - name: Terraform Init
        working-directory: devops/terraform/environments/${{ matrix.environment }}
        run: |
          # GitOps: Remote state enables team collaboration and state locking
          terraform init \
            -backend-config="bucket=terraform-state-${{ secrets.AWS_ACCOUNT_ID }}-${{ matrix.environment }}" \
            -backend-config="key=expenses-app/${{ matrix.environment }}/terraform.tfstate" \
            -backend-config="region=us-west-2"

      # Validate Terraform configuration
      - name: Terraform Validate
        working-directory: devops/terraform/environments/${{ matrix.environment }}
        run: terraform validate

      # Format check (GitOps: Consistent code formatting)
      - name: Terraform Format Check
        working-directory: devops/terraform/environments/${{ matrix.environment }}
        run: terraform fmt -check -recursive

      # Terraform Linting with TFLint
      - name: Setup TFLint
        uses: terraform-linters/setup-tflint@v4
        with:
          tflint_version: latest

      - name: Run TFLint
        working-directory: devops/terraform/environments/${{ matrix.environment }}
        run: |
          # Initialize TFLint with AWS ruleset
          tflint --init
          
          # Run TFLint with detailed output
          tflint --format=sarif > tflint-${{ matrix.environment }}.sarif || true
          
          # Also run with compact format for PR comments
          tflint --format=compact > tflint-results.txt || true
          
          echo "## 🔍 TFLint Results - ${{ matrix.environment }}" >> security-summary.md
          if [ -s tflint-results.txt ]; then
            echo '```' >> security-summary.md
            cat tflint-results.txt >> security-summary.md
            echo '```' >> security-summary.md
          else
            echo "✅ No TFLint issues found" >> security-summary.md
          fi

      # Terraform Security Scanning with tfsec
      - name: Run tfsec
        uses: aquasecurity/tfsec-action@v1.0.3
        with:
          working_directory: devops/terraform/environments/${{ matrix.environment }}
          format: sarif
          soft_fail: true
          additional_args: --out tfsec-${{ matrix.environment }}.sarif

      # Generate tfsec summary for PR comments
      - name: Generate tfsec summary
        working-directory: devops/terraform/environments/${{ matrix.environment }}
        run: |
          # Run tfsec with table format for summary
          tfsec --format=table --out=tfsec-summary.txt . || true
          
          echo "## 🛡️ tfsec Security Scan - ${{ matrix.environment }}" >> security-summary.md
          if [ -s tfsec-summary.txt ]; then
            echo '```' >> security-summary.md
            cat tfsec-summary.txt >> security-summary.md
            echo '```' >> security-summary.md
          else
            echo "✅ No security issues found" >> security-summary.md
          fi

      # Policy compliance with Checkov
      - name: Run Checkov compliance scan
        uses: bridgecrewio/checkov-action@master
        with:
          directory: devops/terraform/environments/${{ matrix.environment }}
          framework: terraform
          output_format: sarif
          output_file_path: checkov-${{ matrix.environment }}.sarif
          soft_fail: true

      # Generate Checkov summary
      - name: Generate Checkov summary
        working-directory: devops/terraform/environments/${{ matrix.environment }}
        run: |
          # Run Checkov with compact format for summary
          checkov -d . --framework terraform --compact --quiet > checkov-summary.txt || true
          
          echo "## 📋 Checkov Compliance - ${{ matrix.environment }}" >> security-summary.md
          if [ -s checkov-summary.txt ]; then
            echo '```' >> security-summary.md
            head -20 checkov-summary.txt >> security-summary.md  # Limit output size
            echo '```' >> security-summary.md
          else
            echo "✅ All compliance checks passed" >> security-summary.md
          fi

      # Upload all security scan results to GitHub Security tab
      - name: Upload TFLint results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: devops/terraform/environments/${{ matrix.environment }}/tflint-${{ matrix.environment }}.sarif
          category: tflint-${{ matrix.environment }}
        if: always() && hashFiles('devops/terraform/environments/${{ matrix.environment }}/tflint-${{ matrix.environment }}.sarif') != ''

      - name: Upload tfsec results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: devops/terraform/environments/${{ matrix.environment }}/tfsec-${{ matrix.environment }}.sarif
          category: tfsec-${{ matrix.environment }}
        if: always() && hashFiles('devops/terraform/environments/${{ matrix.environment }}/tfsec-${{ matrix.environment }}.sarif') != ''

      - name: Upload Checkov results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: checkov-${{ matrix.environment }}.sarif
          category: checkov-${{ matrix.environment }}
        if: always() && hashFiles('checkov-${{ matrix.environment }}.sarif') != ''

      # Generate Terraform plan
      - name: Terraform Plan
        id: plan
        working-directory: devops/terraform/environments/${{ matrix.environment }}
        run: |
          # Generate plan with detailed output
          terraform plan \
            -detailed-exitcode \
            -out=tfplan-${{ matrix.environment }} \
            -var="environment=${{ matrix.environment }}" \
            -var="db_password=${{ secrets[format('{0}_DB_PASSWORD', matrix.environment | upper)] }}" \
            > plan-output.txt 2>&1
          
          # Capture exit code (0=no changes, 1=error, 2=changes)
          PLAN_EXIT_CODE=$?
          echo "plan-exit-code=$PLAN_EXIT_CODE" >> $GITHUB_OUTPUT
          
          # Set output for matrix environment
          echo "plan-${{ matrix.environment }}=$PLAN_EXIT_CODE" >> $GITHUB_OUTPUT
          
          # Save plan output for PR comment
          if [ "$PLAN_EXIT_CODE" -eq 2 ]; then
            echo "## 📋 Terraform Plan - ${{ matrix.environment }}" >> plan-summary.md
            echo '```terraform' >> plan-summary.md
            cat plan-output.txt >> plan-summary.md
            echo '```' >> plan-summary.md
          elif [ "$PLAN_EXIT_CODE" -eq 0 ]; then
            echo "## ✅ No changes - ${{ matrix.environment }}" >> plan-summary.md
            echo "Infrastructure is up to date." >> plan-summary.md
          fi

      # Upload plan artifacts
      - name: Upload plan artifacts
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan-${{ matrix.environment }}
          path: |
            devops/terraform/environments/${{ matrix.environment }}/tfplan-${{ matrix.environment }}
            devops/terraform/environments/${{ matrix.environment }}/plan-summary.md
        if: always()

      # Comment on PR with plan and security results (if this is a PR)
      - name: Comment PR with results
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        with:
          script: |
            const fs = require('fs');
            let comment = '';
            
            // Add Terraform plan results
            const planPath = 'devops/terraform/environments/${{ matrix.environment }}/plan-summary.md';
            if (fs.existsSync(planPath)) {
              comment += fs.readFileSync(planPath, 'utf8') + '\n\n';
            }
            
            // Add security scan results
            const securityPath = 'devops/terraform/environments/${{ matrix.environment }}/security-summary.md';
            if (fs.existsSync(securityPath)) {
              comment += '# 🛡️ Terraform Security Analysis\n\n';
              comment += fs.readFileSync(securityPath, 'utf8');
            }
            
            if (comment) {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            }

  # Job 2: Terraform Apply (Manual approval required for prod)
  # GitOps: Controlled deployment with approval gates
  terraform-apply:
    runs-on: ubuntu-latest
    needs: terraform-plan
    if: |
      (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'apply') ||
      (github.event_name == 'push' && github.ref == 'refs/heads/main')
    
    # Production requires manual approval
    environment: 
      name: ${{ github.event.inputs.environment || 'dev' }}
      url: ${{ steps.deploy.outputs.application_url }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GitHubActionsRole-${{ github.event.inputs.environment || 'dev' }}
          aws-region: us-west-2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      # Download plan from previous job
      - name: Download plan
        uses: actions/download-artifact@v4
        with:
          name: terraform-plan-${{ github.event.inputs.environment || 'dev' }}
          path: devops/terraform/environments/${{ github.event.inputs.environment || 'dev' }}

      - name: Terraform Init
        working-directory: devops/terraform/environments/${{ github.event.inputs.environment || 'dev' }}
        run: |
          terraform init \
            -backend-config="bucket=terraform-state-${{ secrets.AWS_ACCOUNT_ID }}-${{ github.event.inputs.environment || 'dev' }}" \
            -backend-config="key=expenses-app/${{ github.event.inputs.environment || 'dev' }}/terraform.tfstate" \
            -backend-config="region=us-west-2"

      # Apply the planned changes
      - name: Terraform Apply
        id: deploy
        working-directory: devops/terraform/environments/${{ github.event.inputs.environment || 'dev' }}
        run: |
          # Apply the previously generated plan
          terraform apply tfplan-${{ github.event.inputs.environment || 'dev' }}
          
          # Get outputs for verification
          ALB_DNS=$(terraform output -raw alb_dns_name 2>/dev/null || echo "")
          if [ -n "$ALB_DNS" ]; then
            echo "application_url=http://$ALB_DNS" >> $GITHUB_OUTPUT
          fi

      # Verify infrastructure deployment
      - name: Verify deployment
        run: |
          echo "## 🏗️ Infrastructure Deployment Complete" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: ${{ github.event.inputs.environment || 'dev' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Terraform Version**: ${{ env.TF_VERSION }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Deployment Time**: $(date)" >> $GITHUB_STEP_SUMMARY
          
          if [ -n "${{ steps.deploy.outputs.application_url }}" ]; then
            echo "- **Application URL**: ${{ steps.deploy.outputs.application_url }}" >> $GITHUB_STEP_SUMMARY
          fi

  # Job 3: Drift Detection
  # GitOps: Continuous monitoring for configuration drift
  drift-detection:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    
    strategy:
      matrix:
        environment: [dev, staging, prod]
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GitHubActionsRole-${{ matrix.environment }}
          aws-region: us-west-2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Init
        working-directory: devops/terraform/environments/${{ matrix.environment }}
        run: |
          terraform init \
            -backend-config="bucket=terraform-state-${{ secrets.AWS_ACCOUNT_ID }}-${{ matrix.environment }}" \
            -backend-config="key=expenses-app/${{ matrix.environment }}/terraform.tfstate" \
            -backend-config="region=us-west-2"

      # Detect configuration drift
      - name: Detect drift
        working-directory: devops/terraform/environments/${{ matrix.environment }}
        run: |
          # Run plan to detect drift
          terraform plan \
            -detailed-exitcode \
            -var="environment=${{ matrix.environment }}" \
            -var="db_password=${{ secrets[format('{0}_DB_PASSWORD', matrix.environment | upper)] }}" \
            > drift-report.txt 2>&1
          
          DRIFT_EXIT_CODE=$?
          
          if [ $DRIFT_EXIT_CODE -eq 2 ]; then
            echo "⚠️ Configuration drift detected in ${{ matrix.environment }}"
            
            # Create GitHub issue for drift
            gh issue create \
              --title "Configuration Drift Detected - ${{ matrix.environment }}" \
              --body "$(cat drift-report.txt)" \
              --label "infrastructure,drift,${{ matrix.environment }}"
          else
            echo "✅ No drift detected in ${{ matrix.environment }}"
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}