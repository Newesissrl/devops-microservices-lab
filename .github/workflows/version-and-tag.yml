# GitVersion Semantic Versioning Workflow
# Automatically calculates semantic version and creates tags on main branch
# Integrates with GitOps deployment workflows for version-based releases

name: Version and Tag

# Trigger on pull requests to main for version validation
# Trigger on push to main for tagging and release
on:
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened]
  push:
    branches: [main]

permissions:
  contents: write  # Required for creating tags
  pull-requests: write  # Required for PR comments

jobs:
  # Job 1: Calculate Semantic Version
  # GitOps: Determine version based on conventional commits and branch strategy
  calculate-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.gitversion.outputs.semVer }}
      major: ${{ steps.gitversion.outputs.major }}
      minor: ${{ steps.gitversion.outputs.minor }}
      patch: ${{ steps.gitversion.outputs.patch }}
      prerelease: ${{ steps.gitversion.outputs.preReleaseTag }}
      build: ${{ steps.gitversion.outputs.buildMetaData }}
      full-version: ${{ steps.gitversion.outputs.fullSemVer }}
      informational: ${{ steps.gitversion.outputs.informationalVersion }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # GitVersion needs full history

      # Install and run GitVersion
      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v0.10.2
        with:
          versionSpec: '5.x'

      - name: Determine Version
        id: gitversion
        uses: gittools/actions/gitversion/execute@v0.10.2
        with:
          useConfigFile: true
          configFilePath: GitVersion.yml

      # Display version information
      - name: Display GitVersion outputs
        run: |
          echo "## 🏷️ Version Information" >> $GITHUB_STEP_SUMMARY
          echo "- **Semantic Version**: ${{ steps.gitversion.outputs.semVer }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Full Version**: ${{ steps.gitversion.outputs.fullSemVer }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Informational Version**: ${{ steps.gitversion.outputs.informationalVersion }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Major**: ${{ steps.gitversion.outputs.major }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Minor**: ${{ steps.gitversion.outputs.minor }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Patch**: ${{ steps.gitversion.outputs.patch }}" >> $GITHUB_STEP_SUMMARY
          
          if [ -n "${{ steps.gitversion.outputs.preReleaseTag }}" ]; then
            echo "- **Pre-release**: ${{ steps.gitversion.outputs.preReleaseTag }}" >> $GITHUB_STEP_SUMMARY
          fi

  # Job 2: Validate Version on Pull Request
  # GitOps: Provide version preview in PR comments
  pr-version-comment:
    runs-on: ubuntu-latest
    needs: calculate-version
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Comment PR with version info
        uses: actions/github-script@v7
        with:
          script: |
            const version = '${{ needs.calculate-version.outputs.version }}';
            const fullVersion = '${{ needs.calculate-version.outputs.full-version }}';
            const informational = '${{ needs.calculate-version.outputs.informational }}';
            
            const comment = `## 🏷️ Version Preview
            
            This PR will result in the following version when merged to main:
            
            - **Semantic Version**: \`${version}\`
            - **Full Version**: \`${fullVersion}\`
            - **Informational Version**: \`${informational}\`
            
            ### Version Increment Rules
            - Use \`+semver: major\` or \`+semver: breaking\` in commit message for major version bump
            - Use \`+semver: minor\` or \`+semver: feature\` in commit message for minor version bump  
            - Use \`+semver: patch\` or \`+semver: fix\` in commit message for patch version bump
            - Use \`+semver: none\` or \`+semver: skip\` in commit message to skip version increment
            
            ### Container Image Tags
            When this PR is merged, container images will be tagged with:
            - \`v${version}\`
            - \`latest\` (for main branch)
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  # Job 3: Create Git Tag on Main Branch
  # GitOps: Tag releases for deployment tracking and rollback capability
  create-tag:
    runs-on: ubuntu-latest
    needs: calculate-version
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      # Create and push semantic version tag
      - name: Create and push tag
        run: |
          VERSION="v${{ needs.calculate-version.outputs.version }}"
          
          echo "Creating tag: $VERSION"
          
          # Configure git
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          
          # Create annotated tag with version information
          git tag -a "$VERSION" -m "Release $VERSION
          
          Version Details:
          - Semantic Version: ${{ needs.calculate-version.outputs.version }}
          - Full Version: ${{ needs.calculate-version.outputs.full-version }}
          - Informational Version: ${{ needs.calculate-version.outputs.informational }}
          - Commit: ${{ github.sha }}
          - Branch: ${{ github.ref_name }}
          - Workflow: ${{ github.workflow }}
          - Run ID: ${{ github.run_id }}"
          
          # Push tag
          git push origin "$VERSION"
          
          echo "✅ Tag $VERSION created and pushed"
          
          # Set output for downstream jobs
          echo "version_tag=$VERSION" >> $GITHUB_OUTPUT
        id: tag

      # Create GitHub Release
      - name: Create GitHub Release
        uses: actions/github-script@v7
        with:
          script: |
            const version = 'v${{ needs.calculate-version.outputs.version }}';
            const fullVersion = '${{ needs.calculate-version.outputs.full-version }}';
            const informational = '${{ needs.calculate-version.outputs.informational }}';
            
            const releaseBody = `## Release ${version}
            
            ### Version Information
            - **Semantic Version**: ${version}
            - **Full Version**: ${fullVersion}
            - **Informational Version**: ${informational}
            - **Commit**: ${{ github.sha }}
            - **Date**: ${new Date().toISOString()}
            
            ### Container Images
            This release includes the following container images:
            - \`ghcr.io/${{ github.repository }}/backend:${version}\`
            - \`ghcr.io/${{ github.repository }}/frontend:${version}\`
            - \`ghcr.io/${{ github.repository }}/processor:${version}\`
            - \`ghcr.io/${{ github.repository }}/lakepublisher:${version}\`
            
            ### Deployment
            - **Staging**: Automatically deployed
            - **Production**: Manual deployment required
            
            ### Changes
            See commit history for detailed changes included in this release.
            `;
            
            const release = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: version,
              name: `Release ${version}`,
              body: releaseBody,
              draft: false,
              prerelease: ${{ needs.calculate-version.outputs.prerelease != '' }}
            });
            
            console.log(`Created release: ${release.data.html_url}`);

      # Trigger container build and deployment
      - name: Trigger container build
        uses: actions/github-script@v7
        with:
          script: |
            const version = 'v${{ needs.calculate-version.outputs.version }}';
            
            // Trigger build-and-push workflow with semantic version
            await github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'build-and-push.yml',
              ref: 'main',
              inputs: {
                version_tag: version,
                deploy_to_staging: 'true'
              }
            });
            
            console.log(`Triggered container build with version: ${version}`);

      # Summary
      - name: Deployment summary
        run: |
          echo "## 🚀 Release Created" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: v${{ needs.calculate-version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Tag**: ${{ steps.tag.outputs.version_tag }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Release Time**: $(date)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "1. Container images will be built and tagged with semantic version" >> $GITHUB_STEP_SUMMARY
          echo "2. Staging deployment will be triggered automatically" >> $GITHUB_STEP_SUMMARY
          echo "3. Production deployment requires manual approval" >> $GITHUB_STEP_SUMMARY